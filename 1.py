from math import *
import time

#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

#Enter the numbers as a and b whose multiple sum you would like to get.
#Time complexity : Linear time O(n)
def sum_of_multiple(a,b):
	sum =0
	t0 = time.time()
	for i in range (1,10000):
		if((i%a == 0) or (i%b == 0)):
			sum = sum + i
	t1 = time.time()
	print ("\n",t1)
	return sum

print(sum_of_multiple(3,5))


#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#Pass the parameter as the number that should not exceed and num1 which is filtering all the even terms.
#TIme Complexity : Linear time O(n)
def fib(exceed,num1):
	a = 1
	b = 2
	sum = 2
	c = 0
	while(c < exceed):
		c = a + b
		if(c % num1 == 0):
			sum = sum + c
		a = b
		b = c
	return sum

print(fib(4000000,2))


#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?

def lpf():
	num = 600851475143
	div = 2
	t0 = time.time()
	while(num != 0):
		if(num % div !=0):
			div = div + 1
		else:
			maxpf = num
			num = num/div
			if(num == 1):
				break;
	t1 = time.time()
	t = t1 - t0
	print(t)
	return maxpf


print(lpf())
